//
//  ModeSelectionController.m
//  GmoLoader
//
//  Created by David Nesbitt on 9/19/10.
//  Copyright 2010 NezSoft. All rights reserved.
//

#import "ModeSelectionController.h"
#import "NezSceneManager.h"
#import "ModeSelectionScene.h"
#import "SceneCrystalWorld.h"
#import "SceneAnimationSelection.h"

#define BUTTON_WIDTH 160
#define BUTTON_HEIGHT 30
#define BUTTON_V_SPACING 50

@implementation ModeSelectionController

-(id)initWithScene:(NezScene*)aScene {
	if (self = [super initWithScene:aScene]) {
		sceneCount = 0;
		autoCameraDelay = 0;
	}
	return self;
}

-(void)addButtonWtihName:(NSString*)sceneName action:(SEL)action {
	float x = ((scaledScreenWidth-BUTTON_WIDTH)/2);
	float y = (BUTTON_V_SPACING/2+BUTTON_V_SPACING*sceneCount++);
	float ty = parentView.superview.transform.ty*2;
	UIButton *sceneButton = [UIButton buttonWithType:UIButtonTypeRoundedRect];
	sceneButton.frame = CGRectMake(x, y-ty, BUTTON_WIDTH, BUTTON_HEIGHT);
	[sceneButton setTitle:sceneName forState:UIControlStateNormal];
	[sceneButton addTarget:self action:action forControlEvents:UIControlEventTouchUpInside];
	[parentView addSubview:sceneButton];
}

-(void)setView:(EAGLView*)view {
	[super setView:view];
	
	[self addButtonWtihName:[SceneCrystalWorld getSceneName] action:@selector(crystalWorldButtonClicked:)];
	[self addButtonWtihName:[SceneAnimationSelection getSceneName] action:@selector(animationButtonClicked:)];
	
	pinch = [[UIPinchGestureRecognizer alloc] initWithTarget:self action:@selector(handlePinch:)];
	[parentView addGestureRecognizer:pinch];
}

-(void)crystalWorldButtonClicked:(UIButton*)sender {
	[parentView changeScenes:[SceneCrystalWorld getSceneName] WithArguments:nil];
}

-(void)animationButtonClicked:(UIButton*)sender {
	NSString *nextSceneName = [SceneAnimationSelection getSceneName];
	NSString *nextSceneArgs = [scene getNextSceneArguments:nextSceneName];
	[parentView changeScenes:nextSceneName WithArguments:nextSceneArgs];
}

-(void)updateWithTimeElapsed:(CFTimeInterval)timeElapsed {
	if(autoCameraDelay > 0) {
		autoCameraDelay -= timeElapsed;
		[scene setAutoCameraDelay:autoCameraDelay];
	}
	[self updateWithFramesElapsed:timeElapsed*scene->framesPerSecond];
}

-(BOOL)touchesBegan:(NSSet*)touches withEvent:(UIEvent*)event {
	autoCameraDelay = 1.0;
	return [super touchesBegan:touches withEvent:event];
}

-(void)invalidate {
	[super invalidate];
}

@end
